{
  "hash": "c4786be5cdfc42f9681abc7b9ac2534f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: clean-revealjs\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\ndate: last-modified\nexecute: \n  eval: true\n  echo: false\neditor: \n  markdown: \n    wrap: 72\nbibliography: references.bib\nnocite: |\n  @*\n---\n\n\n\n\n# Quarto {.title-slide}\n\n<hr style=\"width: 75%; text-align: left; margin-left: 0; border: 1px solid black;\">\n\n**Luc Clair**\\\nUniversity of Winnipeg \\| ECON/GECON 3201\n\n# Preliminaries\n\n## Software\n\n-   Installation order:\n\n    > -   R: <https://cran.r-project.org>\n    > -   R Studio: <https://posit.co/download/rstudio-desktop/>\n    > -   TeX (Follow Quarto's guide for TeX installation:\n    >     <https://quarto.org/docs/output-formats/pdf-engine.html>\\])\n\n> -   Quarto is automatically installed when you install R Studio\n\n# Introduction {.title-slide}\n\n<hr style=\"width: 77%; text-align: left; margin-left: 0; border: 1px solid black;\">\n\n## Introduction\n\n-   Quarto is an open-source tool designed for creating dynamic\n    documents, reports, presentations, and websites\n\n> -   It integrates with various programming languages and provides a\n>     unified framework for combining code, narrative text, and data\n>     visualization\n> -   Quarto is particularly useful for data science, research, and\n>     technical communication\n\n## Scientific Reports\n\n-   What makes a report scientific?\n\n    > -   Structured format\n    > -   Evidence-based, relies on empirical data, experiments, or\n    >     observational data\n    > -   Uses quatitative or qualitative analysis to support claims\n    > -   Replicability\n    > -   Use of figures, tables, and equations\n    > -   Citations and References\n\n## Document Preparation Systems\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"font-size: 20px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Software </th>\n   <th style=\"text-align:left;\"> Type </th>\n   <th style=\"text-align:left;\"> Primary Use </th>\n   <th style=\"text-align:left;\"> Output Formats </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;min-width: 1.3in; \"> LaTeX </td>\n   <td style=\"text-align:left;\"> Typesetting System </td>\n   <td style=\"text-align:left;max-width: 2.5in; \"> High-quality academic documents </td>\n   <td style=\"text-align:left;\"> PDF, Beamer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;min-width: 1.3in; \"> Sweave </td>\n   <td style=\"text-align:left;\"> Literate Programming Tool </td>\n   <td style=\"text-align:left;max-width: 2.5in; \"> Embedding R code in LaTeX </td>\n   <td style=\"text-align:left;\"> PDF, Beamer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;min-width: 1.3in; \"> R Markdown </td>\n   <td style=\"text-align:left;\"> Reproducible Reporting System </td>\n   <td style=\"text-align:left;max-width: 2.5in; \"> Dynamic reports with R </td>\n   <td style=\"text-align:left;\"> HTML, PDF, Word, Beamer, PPTX </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;min-width: 1.3in; \"> Bookdown </td>\n   <td style=\"text-align:left;\"> Reproducible Publishing System </td>\n   <td style=\"text-align:left;max-width: 2.5in; \"> Writing books, theses, and long-form documents </td>\n   <td style=\"text-align:left;\"> HTML, PDF, Word, Beamer, PPTX, EPUB, etc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;min-width: 1.3in; \"> Quarto </td>\n   <td style=\"text-align:left;\"> Reproducible Publishing System </td>\n   <td style=\"text-align:left;max-width: 2.5in; \"> Multi-language scientific publishing (reports, books, blogs, presentations) </td>\n   <td style=\"text-align:left;\"> HTML, PDF, Word, Beamer, PPTX, EPUB, etc. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## Quarto Output Formats\n\n-   Quarto documents can be rendered into multiple formats:\n\n    > -   Documents: Hypertext Markup Language (HTML), PDF, and Word\n    > -   Presentations: Reveal.js, Beamer, and PowerPoint\n    > -   Interactive: Shiny, Observable JS\n\n> -   You can refine the look of your document based on the format\n>     chosen\n> -   Today's talk will focus on PDF output and how it compares to\n>     LaTeX, however, much of the syntax will translate to the other\n>     formats\n\n## Output Formats (cont.)\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> PDF </th>\n   <th style=\"text-align:center;\"> HTML </th>\n   <th style=\"text-align:center;\"> Word </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;width: 15em; \">  <img src=\"images/fig_1_pdf.png\">\n</td>\n   <td style=\"text-align:center;width: 15em; \">  <img src=\"images/fig_1_html.png\">\n</td>\n   <td style=\"text-align:center;width: 15em; \">  <html><body><img src=\"images/fig_1_docx.png\"></body></html>\n</td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n# Elements of a Quarto Document {.title-slide}\n\n<hr style=\"width: 77%; text-align: left; margin-left: 0; border: 1px solid black;\">\n\n## YAML Metadata\n\n-   Metadata: data about data\n\n![](images/yaml_1.png){fig.align=\"center\"}\n\n> -   The header at the top of the document contains metadata settings\n> -   Defines title, author, date, format, options, and more\n\n## Common Metadata Fields\n\n+---------------+-------------------------+\n| Field         | Description             |\n+===============+=========================+\n| `title`       | Title of the document   |\n+---------------+-------------------------+\n| `subtitle`    | Subtitle displayed      |\n|               | below the title         |\n+---------------+-------------------------+\n| `author`      | Name(s) of the document |\n|               | author(s)               |\n+---------------+-------------------------+\n| `date`        | Date of the document    |\n+---------------+-------------------------+\n| `format`      | Output format (e.g.,    |\n|               | `html`, `pdf`,          |\n|               | `revealjs`, etc.)       |\n+---------------+-------------------------+\n| `editor`      | Editor options like     |\n|               | `visual` or `source`    |\n+---------------+-------------------------+\n| `execute`     | Code execution options  |\n|               | (e.g., `echo`, `eval`,  |\n|               | `warning`)              |\n+---------------+-------------------------+\n| `theme`       | Visual theme (for       |\n|               | `html` or `revealjs`    |\n|               | documents)              |\n+---------------+-------------------------+\n\n## Common Metadata Fields (cont.)\n\n+-----------------------------------+-----------------------------------+\n| Field                             | Description                       |\n+===================================+===================================+\n| `toc`                             | Boolean to include a Table of     |\n|                                   | Contents                          |\n+-----------------------------------+-----------------------------------+\n| `number-sections`                 | Boolean to number section headers |\n+-----------------------------------+-----------------------------------+\n| `highlight-style`                 | Syntax highlighting style for     |\n|                                   | code blocks                       |\n+-----------------------------------+-----------------------------------+\n| `bibliography`                    | Path to bibliography file for     |\n|                                   | citations                         |\n+-----------------------------------+-----------------------------------+\n| `csl`                             | Path to CSL file to format        |\n|                                   | citations and references          |\n+-----------------------------------+-----------------------------------+\n| `filters`                         | List of Pandoc filters to apply   |\n+-----------------------------------+-----------------------------------+\n| `lang`                            | Document language (e.g., `en`,    |\n|                                   | `fr`, etc.)                       |\n+-----------------------------------+-----------------------------------+\n| `comments`                        | Enable commenting system (e.g.,   |\n|                                   | `hypothesis`, `utterances`)       |\n+-----------------------------------+-----------------------------------+\n| `title-block-style`.              | Controls title page style         |\n|                                   | (`default`, `none`, `minimal`,    |\n|                                   | etc.)                             |\n+-----------------------------------+-----------------------------------+\n\n## Text Content\n\n-   The body of the document is written using *Markdown*\n\n::: incremental\n-   Supports headings, lists, bold/italic text, links, images, and\n    equations\n    -   More on equations later\n:::\n\n## Section Headings\n\n-   Section headings are denoted using `#` in Quarto\n\n::: fragment\n-   E.g.,\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n+-------------------------------+------------------------------------+\n| Quarto Syntax                 | Output                             |\n+===============================+====================================+\n| ``` quarto                    | ![](i                              |\n| # Heading 1                   | mages/headings_a.png){width=\"30%\"} |\n| ```                           |                                    |\n+-------------------------------+------------------------------------+\n| ``` quarto                    | ![](i                              |\n| ## Heading 2                  | mages/headings_b.png){width=\"30%\"} |\n| ```                           |                                    |\n+-------------------------------+------------------------------------+\n| ``` quarto                    | ![](i                              |\n| ### Heading 3                 | mages/headings_c.png){width=\"30%\"} |\n| ```                           |                                    |\n+-------------------------------+------------------------------------+\n:::\n\n## Lists\n\n+----------------+-----------------------+\n| Quarto Syntax  | Output                |\n+================+=======================+\n| ``` quarto     | -   Item 1            |\n| - Item 1       | -   Item 2            |\n| - Item 2       |     -   Sub-item 1    |\n|                |     -   Sub-item 2    |\n|   - Sub-item 1 | -   Item 3            |\n|                |                       |\n|   - Sub-item 2 |                       |\n| - Item 3       |                       |\n| ```            |                       |\n+----------------+-----------------------+\n\n## Text formatting\n\n+-----------------------------------+-----------------------------------+\n| Quarto Syntax                     | Output                            |\n+===================================+===================================+\n| `*italic                          | *italics*, **bold**, ***bold      |\n| s*, **bold**, ***bold italics***` | italics***                        |\n+-----------------------------------+-----------------------------------+\n| `superscripts^2^/subscripts~2~`   | superscripts^2^ / subscripts~2~   |\n+-----------------------------------+-----------------------------------+\n| `~~strikethrough~~`               | ~~strikethrough~~                 |\n+-----------------------------------+-----------------------------------+\n| `` `verbatim code` ``             | `verbatim code`                   |\n+-----------------------------------+-----------------------------------+\n\n## Call-Out Blocks\n\n-   Create call-out blocks for notes, tips, definitions, theorems,\n    lemmas, warnings, etc.\n-   E.g., Definition\n\n``` quarto\n::: {.callout-tip}\n## Definition\n\n**Quarto** is an open-source, multi-language scientific publishing system that allows users to create dynamic, reproducible documents, presentations, books, and websites using code and markdown.\n:::\n```\n\n## Call-Out Blocks (cont.)\n\n::: callout-tip\n## Definition\n\n**Quarto** is an open-source, multi-language scientific publishing\nsystem that allows users to create dynamic, reproducible documents,\npresentations, books, and websites using code and markdown.\n:::\n\n## Code Chunks\n\n-   Code chunks allow running R, Python, Julia, or other languages\n    inside the document\n\n-   Two ways to insert an R code chunk:\n\n    1.  Begin with triple backticks ```` ```{r} ```` and end with\n        ```` ``` ````\n    2.  Add a chunk using the tool in R Studio\n\n## Code Chunks (cont.)\n\n![](images/chunk_1.png)\n\n## Code Chunks (cont.)\n\n-   E.g., producing a histogram of a standard normal variable $X$\n\n```` markdown\n```{r}\n#| echo: false\n#| eval: true\n#| fig-cap: \"Histogram of $X$\"\n#| dev: 'tikz'\n\n# For nice looking figures LaTeX figures install tikzDevice\n# install.packages(\"tikzDevice\")\n\nset.seed(42) # sets the seed so that the results will stay the same\n\nx <- rnorm(1000,0,1) # Generate a standard normal variable\n\n# Create a histogram\nhist(x,\n     freq = FALSE,\n     ylab = \"Probability\",\n     xlab = \"$X$\",\n     main = \"\")\n```\n````\n\n## Code Chunks (cont.)\n\n![](images/hist.png)\n\n# Equations\n\n## LaTeX\n\n-   Equations are written using LaTeX syntax i.e.,\n\n    > -   Wrapping equations in `$` for **in-line** equations, e.g.,\n    >     `$y=f(x)$` gives $y=f(x)$\n    > -   Wrapping equations in `$$` for **display math**, e.g.,\n    >     `$$y=f(x)$$` gives $$y=f(x)$$\n\n## Greek Letters\n\n| Name  | Syntax   |  Output  |\n|-------|----------|:--------:|\n| Alpha | `\\alpha` | $\\alpha$ |\n| Beta  | `\\beta`  | $\\beta$  |\n| Gamma | `\\gamma` | $\\gamma$ |\n| Delta | `\\delta` | $\\delta$ |\n| Sigma | `\\sigma` | $\\sigma$ |\n| Pi    | `\\pi`    |  $\\pi$   |\n| Theta | `\\theta` | $\\theta$ |\n\n## Arithmetic Operations\n\n| Name           | Syntax   |  Output  |\n|----------------|----------|:--------:|\n| Addition       | `+`      |   $+$    |\n| Subtraction    | `-`      |   $-$    |\n| Multiplication | `\\times` | $\\times$ |\n| Division       | `/`      |   $/$    |\n| Summation      | `\\sum`   |  $\\sum$  |\n| Product        | `\\prod`  | $\\prod$  |\n\n## Subscripts and Superscripts\n\n| Purpose   | Syntax    |  Output   |\n|-----------|-----------|:---------:|\n| Subscript | `x_i`     |   $x_i$   |\n| Exponent  | `x^2`     |   $x^2$   |\n| Combined  | `x_i^2`   |  $x_i^2$  |\n| Grouped   | `x^{n+1}` | $x^{n+1}$ |\n\n## Subscripts and Superscripts\n\n-   E.g.,\n\n+----------------+------------------------+\n| LaTeX Syntax   | Output                 |\n+================+========================+\n| ``` latex      | \\$\\$\\\\sum\\_{i=1}\\^n    |\n| $$             | x_i \\$\\$               |\n| \\              |                        |\n| s              |                        |\n| um_{i=1}^n x_i |                        |\n| $$             |                        |\n| ```            |                        |\n+----------------+------------------------+\n\n## Fractions, Roots, and Powers\n\n| Purpose     | Syntax        |    Output     |\n|-------------|---------------|:-------------:|\n| Fraction    | `\\frac{a}{b}` | $\\frac{a}{b}$ |\n| Square root | `\\sqrt{x}`    |  $\\sqrt{x}$   |\n| n-th root   | `\\sqrt[n]{x}` | $\\sqrt[n]{x}$ |\n\n## Advanced Symbols\n\n| Name         | Syntax     |   Output   |\n|--------------|------------|:----------:|\n| Integral     | `\\int`     |   $\\int$   |\n| Partial diff | `\\partial` | $\\partial$ |\n| Infinity     | `\\infty`   |  $\\infty$  |\n| Approximate  | `\\approx`  | $\\approx$  |\n\n## Advanced Symbols (cont.)\n\n-   E.g.,\n\n+----------------+------------------------+\n| LaTeX Syntax   | Output                 |\n+================+========================+\n| ``` latex      | \\$\\$\\\\int_0\\^1 f(x)    |\n| $$             | dx\\$\\$                 |\n| \\              |                        |\n| int_0^1 f(x)dx |                        |\n| $$             |                        |\n| ```            |                        |\n+----------------+------------------------+\n\n## Relational and Logical Symbols\n\n+-----------+-----------+-----------+\n| Purpose   | Syntax    | Output    |\n+===========+===========+:=========:+\n| Equals    | `=`       | =         |\n+-----------+-----------+-----------+\n| Not equal | `\\neq`    | ≠         |\n+-----------+-----------+-----------+\n| Greater   | `>`       | \\>        |\n| than      |           |           |\n+-----------+-----------+-----------+\n| Less than | `<`       | \\<        |\n+-----------+-----------+-----------+\n| Greater   | `\\geq`    | ≥         |\n| or equal  |           |           |\n+-----------+-----------+-----------+\n| Less or   | `\\leq`    | ≤         |\n| equal     |           |           |\n+-----------+-----------+-----------+\n| Implies   | `\\ R i    | ⇒         |\n|           | ghtarrow` |           |\n+-----------+-----------+-----------+\n| If and    | `\\iff`    | ⇔         |\n| only if   |           |           |\n+-----------+-----------+-----------+\n\n## Text in Math\n\n-   Insert text into an equation using `\\text{}`\n\n::: fragment\n-   E.g.,\n\n+-------------------+-------------------+\n| LaTeX Syntax      | Output            |\n+===================+===================+\n| ``` latex         | \\$\\$ f(x) =       |\n| $$                |                   |\n| f                 | \\begin{cases}     |\n| (                 | 1                 |\n| x                 |                   |\n| ) = \\begin{cases} | &                 |\n| 1                 |                   |\n|                   | \\                 |\n| &                 | t                 |\n|                   | ext{if } x > 0 \\\\ |\n| \\                 | 0                 |\n| t                 |                   |\n| ext{if } x > 0 \\\\ | &                 |\n| 0                 |  \\text{otherwise} |\n|                   | \\end{cases}       |\n| &                 |                   |\n|  \\text{otherwise} | erwise}           |\n| \\end{cases}       | \\\\end{cases}      |\n| $$                |                   |\n| ```               | \\$\\$              |\n+-------------------+-------------------+\n:::\n\n## Matrices\n\n| LaTeX Syntax                        | Output             |\n|-------------------------------------|--------------------|\n| `\\begin{bmatrix} ... \\end{bmatrix}` | Bracket matrix     |\n| `\\begin{pmatrix} ... \\end{pmatrix}` | Parenthesis matrix |\n\n## Matrices (cont.)\n\n-   E.g.,\n\n+----------------+----------------+\n| LaTeX Syntax   | Output         |\n+================+================+\n| ``` latex      | $$             |\n| $$             | \\              |\n| \\              | begin{bmatrix} |\n| begin{bmatrix} | 1 & 2 \\\\       |\n| 1 & 2 \\\\       | 3 & 4          |\n| 3 & 4          | \\end{bmatrix}  |\n| \\end{bmatrix}  | $$             |\n| $$             |                |\n| ```            |                |\n+----------------+----------------+\n\n## Alignment\n\n-   For multi-step equations, use `\\begin{aligned}...\\end{aligned}`\n\n> -   Use the `&` to mark the alignment point (typically around the\n>     equals sign `=`)\n\n> -   Use `\\\\` to mark a new line\n\n## Alignment (cont.)\n\n-   E.g.,\n\n+------------------------+------------------------+\n| Col1                   | Col2                   |\n+========================+========================+\n| ``` latex              | \\$\\$                   |\n| $$                     |                        |\n| \\begin{aligned}        | \\begin{aligned}        |\n| y                      | y                      |\n|                        |                        |\n| &                      | &                      |\n| =                      | =                      |\n|                        |                        |\n| X                      | X                      |\n| \\beta + \\varepsilon \\\\ | \\beta + \\varepsilon \\\\ |\n| \\                      | \\                      |\n| h                      | h                      |\n| a                      | a                      |\n| t                      | t                      |\n| {                      | {                      |\n| \\                      | \\                      |\n| beta} &= (X'X)^{-1}X'y | beta} &= (X'X)^{-1}X'y |\n| \\end{aligned}          | \\end{aligned}          |\n| $$                     |                        |\n| ```                    | X)\\^{-1}X'y            |\n|                        | \\\\end{aligned}         |\n|                        |                        |\n|                        | 'X)\\^{-1}X'y           |\n|                        | \\\\end{aligned}         |\n|                        |                        |\n|                        | X'X)\\^{-1}X'y          |\n|                        | \\\\end{aligned}         |\n|                        |                        |\n|                        | (X'X)\\^{-1}X'y         |\n|                        | \\\\end{aligned} \\$\\$    |\n+------------------------+------------------------+\n\n## Equations\n\n-   Note: Math mode is only denoted by `$` or `$$`\n\n> -   LaTeX commands (e.g., `\\begin{equation}...\\end{equation}`) still\n>     work, however, they will only appear in PDF output\n\n> -   For numbered equations in Quarto, you have to add a label, which\n>     is then used for cross-referencing\n\n## Equations (cont.)\n\n-   To add a label, add `{#eq-label}` after an equation in display mode\n\n    > -   It is important to remember the `eq-` prefix\n\n::: incremental\n-   To reference the equation, simply use `@eq-label`\n-   E.g., \"`@eq-demo` defines the model: `$$y=f(x)$$ {#eq-demo}`\" gives\n    @eq-demo defines the model: $$y=f(x)$$ {#eq-demo}\n:::\n\n## Figures and Tables\n\n-   Quarto supports dynamic figures and tables\n\n> -   I could devote entire seminars to figures and tables, so here are\n>     some of the basics\n\n::: incremental\n-   For more info, please see Quarto's guide:\n    -   Figures: <https://quarto.org/docs/authoring/figures.html>\n    -   Tables: <https://quarto.org/docs/authoring/tables.html>\n:::\n\n## Figures and Tables\n\n### Figures\n\n-   Two (of many) ways to insert images/figures into a Quarto document\n    1.  Markdown syntax\n    2.  R code (Knitr)\n\n## Figures and Tables\n\n### Markdown Figures Syntax\n\n-   The markdown syntax for adding an image is `![caption](FilePath)`\n\n> -   E.g., `![University of Winnipeg Logo](logo.png)`\n\n## Figures and Tables\n\n### Markdown Figures Syntax (cont.)\n\n::: nostretch\n![](images/logo_pdf.png){fig-align=\"center\" width=\"50%\"}\n:::\n\n## Figures and Tables\n\n### Inserting Images Using knitr\n\n-   `knitr` is the R package that allows us to combine computer\n    languages (statistical software code) and output markup languages\n    (e.g., LaTeX, HTML).\n\n> -   `knitr` has a built-in command for including images called\n>     `include_graphics(\"path\")`.\n\n> -   Inputting images using a code chunk allows for greater\n>     customization of the image output.\n\n## Figures and Tables\n\n### Inserting Images Using knitr (cont.)\n\n-   For example, we can input the UW Logo .png file using `knitr`\n\n```` markdown\n```{r}\n#| echo: false\n#| eval: true\n#| fig-cap: \"University of Winnipeg Logo\" \n\n#> We can call a command from a package using \n#> package.name::command\n\nknitr::include_graphics(\"logo.png\")\n```\n````\n\n## Figures and Tables\n\n### Tables\n\n-   There are two types of tables we want to consider.\n    1.  Tables summarizing information in the text.\n        -   Simple tables and grid tables.\n    2.  Tables summarizing R output within R chunks.\n        -   `kable()` is available in the `knit` package. To use it, we\n            can use `knitr::kable().`\n\n## Figures and Tables\n\n### Creating Tables Using R Studio's Visual Editor\n\n-   R Studio **Visual editor** facilitates the creation of grid tables.\n-   To create a table using the *Visual* editor, click \"Table\" and\n    select \"Insert table\" from the drop-down menu on the top of the\n    Quarto document.\n\n![Visual Editor Menu](images/menu.png)\n\n## Figures and Tables\n\n### Creating Tables Using R Studio's Visual Editor (cont.)\n\n-   Now you have a table that you can edit similar to a Word table.\n    **Right click** your mouse over any cell to see your options\n\n![Table Options](images/table%20menu.png){width=\"50%\"}\n\n## Figures and Tables\n\n### Creating Tables Using R Studio's Visual Editor (cont.)\n\n-   Note the **Align Column** option for simple alignment\n-   Make **Col 2** center aligned\n\n![Setting Table Column\nAlignment](images/table_alignment.png){width=\"50%\"}\n\n## Figures and Tables\n\n### Creating Tables Using R Studio's Visual Editor (cont.)\n\n-   You can add longer texts to each cell, including bulleted and\n    numbered lists\n\n> -   However, we must still use some caution as editing markdown tables\n>     is not as straightforward as editing word tables\n\n> -   Another editor is\n>     [TablesGenerator](https://www.tablesgenerator.com/markdown_tables),\n>     which allows you to edit tables in your browser\n\n## Figures and Tables\n\n### Producing Tables using R Packages\n\n-   The R package we will be using is `knitr`, specifically, the command\n    `kable()`\n\n> -   `kable()` converts any data frame in R into a pipe table\n\n> -   A data frame is another word for dataset; however, some output\n>     from our analyses will be saved as a data frame\n\n> -   `kable()` makes it easy to print this output\n\n## Figures and Tables\n\n### Producing Tables using R Packages (cont.)\n\n-   E.g.,\n\n```` markdown\n```{r}\n#| echo: false\n#| tbl-cap: \"`kable()` Table\"\n\nd <- data.frame(\"Header 1\" = c(\"Left\",1),\n                \"Header 2\" = c(\"Center\",2), \n                \"Header 3\" = c(\"Right\",3),\n                check.names = FALSE) # check.names makes sure that the headers don't change\n\nknitr::kable(d,\n             format = \"pipe\",\n             booktabs = T,\n             escape = FALSE,\n             align = c(\"l\",\"c\",\"r\"), # Set column alignment\n             longtable= T) # Keeps the table where you want it in the document \n```\n````\n\n## Figures and Tables\n\n### Producing Tables using R Packages (cont.)\n\n::: nostretch\n![](images/table_knitr.png){fig-align=\"center\" width=\"50%\"}\n:::\n\n## Figures and Tables\n\n### Cross Referencing\n\n-   Add labels to figures using the `#fig-` prefix and add labels to\n    tables using the `#tbl-` prefix\n\n> -   E.g., `![caption](FilePath){#fig-label}` can then be referenced by\n>     `@fig-label`.\n\n> -   Alternatively, if you are adding a figure or table using R, add\n>     the execution command `label` to your code chunk, i.e.,\n>     `#| label: \"fig-label\"`\n\n## Referencing and Citations\n\n-   An important aspect of academic writing is citing work that is not\n    your own.\n\n> -   Quarto documents can generate citations and bibliographies using\n>     BibLaTeX `.bib` or BibTeX `.bibtex` files.\n\n> -   Note, do not use a \":\" in your citation key for a reference. Only\n>     use \"-\" or \"\\_\". For example `smith_2024`.\n\n## Bibliography\n\n-   Once you have created a `.bib` file with your references, you can\n    add a bibliography to your Quarto document using the `bibliography:`\n    YAML metadata field. E.g.,\n\n``` quarto\n---\ntitle: \"demo\"\nformat: pdf\nbibliography: refs.bib\n---\n```\n\n## Citation Syntax\n\n-   To cite a reference saved in your `.bib` file, use the syntax\n    `[@cite-key]`.\n\n> -   Note that the citation is in a square bracket. If you have more\n>     than one citation, separate each cite key by a semi-colon.\n\n## Citation Syntax\n\n+-----------------------------------+-----------------------------------+\n| Markdown Format                   | Output                            |\n+===================================+===================================+\n| Sample text                       | Sample text [see @bravo_2011, pp. |\n| `[see @bravo_2011, pp. 130-135]`  | 130-135]                          |\n+-----------------------------------+-----------------------------------+\n| Sample text                       | Sample text [@bravo_2011;         |\n| `[@bravo_2011; @li_racine_2007]`  | @li_racine_2007]                  |\n+-----------------------------------+-----------------------------------+\n\n## Citation Syntax\n\nFor in-text citations, simply write `@cite-key`.\n\n+-----------------------------------+-----------------------------------+\n| Markdown Format                   | Output                            |\n+===================================+===================================+\n| `@aitchison_aitken_1976`          | @aitchison_aitken_1976            |\n| developed...                      | developed...                      |\n+-----------------------------------+-----------------------------------+\n| `@aitchison_aitken_1976 [p.413]`  | @aitchison_aitken_1976 [p.413]    |\n| developed...                      | developed...                      |\n+-----------------------------------+-----------------------------------+\n\n## Citation Style\n\n-   The default citation style is the Chicago Manual of Style\n\n-   Can change the style of your citation using the `csl:` metadata\n    field in the YAML header\n\n-   You may want to change the citation style based on personal\n    preference or based on specified requirements (e.g., academic\n    journal, class project, etc.)\n\n-   E.g.,\n\n``` quarto\n---\ntitle: \"demo\"\nformat: pdf\nbibliography: refs.bib\ncsl: nature.csl\n---\n```\n\n## Citation Style\n\nFor more citation styles, please visit: <https://www.zotero.org/styles>\n\n## Bibliography Generation\n\n-   To insert a bibliography, simply insert a section with the title\n    `References`\n\n-   If you want to include an appendix after the references include the\n    following in your reference section:\n\n``` quarto\n# References\n\n::: {#refs}\n:::\n```\n\n# Summary\n\n## Advantages of Quarto\n\n-   Simplified syntax\n\n::: incremental\n-   Integration with R, Python, and Julia\n-   Automated Citations and Bibliographies\n-   Multi-format output from a single source\n-   Automatic cross-referencing for figures, tables and equations\n-   Easy table creation\n:::\n\n## When to Use LaTeX Directly?\n\n-   Journal specific LaTeX formatting\n\n    > -   Can instruct quarto to use a custom template\n    > -   Or extract `.tex` file using `keep-tex: true` in YAML heading\n\n::: incremental\n-   Fine-tuned LaTeX customization\n:::\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [
      "05-quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}