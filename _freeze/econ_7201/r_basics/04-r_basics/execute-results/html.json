{
  "hash": "e8ad8bd7437139b9a397b3d24cb183cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: clean-revealjs\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\ndate: last-modified\nexecute: \n  eval: false\n  echo: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# R Basics {.title-slide}\n\n<hr style=\"width: 75%; text-align: left; margin-left: 0; border: 1px solid black;\">\n\n**Luc Clair**\\\nUniversity of Winnipeg \\| GECON 7201\n\n# Preliminaries\n\n## Software\n\nBy now, you should have intalled the following software:\n\n1.  R (the programming language)\n2.  RStudio (the interface to work with R)\n\n# Introduction\n\n## What is R?\n\n-   R is an open-source programming language and software environment\n    designed for statistical computing, data analysis, and graphical\n    visualization\n\n> -   Offers a wide range of statistical techniques\n\n> -   Provides extensive data visualization capabilities with\n>     high-quality graphics\n\n> -   Supports data manipulation, cleaning, and transformation\n\n## What is R? (cont.)\n\n-   Highly extensible through packages\n\n    > -   There are over 20,000 packages available via CRAN\n    >     (Comprehensive R Archive Network)\n\n> -   Users can create their own custom functions and packages\n\n> -   Frequent updates and contributions from statisticians and data\n>     scientists\n\n> -   Large and active community with extensive documentation,\n>     tutorials, and forums\n\n## Community-Driven Ecosystem\n\n-   The strength and flexibility of R largely come from its vast package\n    ecosystem\n\n-   **R packages** are collections of functions, data sets, and\n    documentation bundled together to extend the functionality of base R\n\n> -   R consists of **base R** and user-contributed packages\n\n> -   Base R is the collection of core functions that are installed by\n>     default (e.g., `stats`, `graphics`, and `utils`)\n\n# Using R in R Studio\n\n## R Studio Interface\n\n![](images/fig_5.png){fig-align=\"center\"}\n\n## Source Code Editor\n\n-   Edit our R scripts\n\n![](images/fig_3a.png){fig-align=\"center\"}\n\n## Console\n\n-   Where the code runs and results are presented\n\n![](images/fig_3b.png){fig-align=\"center\"}\n\n## Console (cont.)\n\n-   It acts as the direct interface between the user and the R\n    interpreter\n\n    > -   Commands entered here are run immediately\n\n::: incremental\n-   Common uses include:\n    -   Typing and running quick commands or code snippets\n    -   Viewing outputs, results, and error messages\n    -   Debugging or testing parts of your code\n    -   Re-run code by using the up and down keys to scroll through\n        history\n:::\n\n## Environment\n\n-   View objects and their structure (e.g., vectors, data frames,\n    functions)\n\n![](images/fig_3c.png){fig-align=\"center\"}\n\n## Environment (cont.)\n\n-   Remove them with the \"broom\" icon or with `rm()`\n\n> -   Inspect variable contents by clicking on them\n\n## Files/Plots/Packages/Help\n\n-   Browse files, view plots, install/view packages, browse help files\n\n![](images/fig_3d.png){fig-align=\"center\"}\n\n## Set Working Directory\n\n-   The **working directory** in R is the default folder where R looks\n    for files to read, and where it saves files you write, unless you\n    specify a different path\n\n::: fragment\n-   Common commands\n\n+-------------------------+--------------------------------------------+\n| Command                 | Purpose                                    |\n+=========================+============================================+\n| `getwd()`               | Get the current working directory          |\n+-------------------------+--------------------------------------------+\n| `s                      | Set a new working directory                |\n| etwd(\"path/to/folder\")` |                                            |\n+-------------------------+--------------------------------------------+\n| `list.files()`          | List files in the current working          |\n|                         | directory                                  |\n+-------------------------+--------------------------------------------+\n:::\n\n## Set Working Directory (cont.)\n\n-   The working directory is shown at the top of the **Console** pane\n\n::: incremental\n-   You can change it via:\n    -   **Session\\>Set Working Directory**\n:::\n\n## Set Working Directory (cont.)\n\n![](images/fig_6.png){fig-align=\"center\"}\n\n## Set Working Directory (cont.)\n\n-   Use RStudio Projects, which set the working directory automatically\n    to the project root\n\n# R Scripts\n\n## R Scripts\n\n-   Code in a console is temporary\n\n::: incremental\n-   Code in R scripts is written and saved for reuse\n    -   Avoid running only from console\n-   This makes your code reproducible and easier to update\n-   To open an R script press **File\\>New Rd Document**\n-   Use meaningful script names, e.g., `regression_analysis.R`,\n    `clean_data.R`\n:::\n\n## Writing and Running R Code (cont.)\n\n-   Use `Ctrl+Enter` (or `Cmd` on Mac) to run a line of code\n\n![](images/fig_14.png){fig-align=\"center\"}\n\n## Writing and Running R Code (cont.)\n\n-   Alternatively, you can press the ![](images/fig_16.png) button at\n    the top of the source window\n\n![](images/fig_14a.png){fig-align=\"center\"}\n\n## Running Multiple lines of Code\n\n-   Highlight lines of code you want to run, then use `Ctrl+Enter` or\n    press the ![](images/fig_16.png) button\n\n> -   If you want to run entire code script, press\n>     ![](images/fig_15.png) at the top of the source window.\n\n# R Packages\n\n## What Are R Packages?\n\n-   A **package** is a collection of:\n\n    > -   Functions\n    > -   Data\n    > -   Documentation\n\n> -   Packages extend the capabilities of base R\n\n## What's Inside a Package?\n\n-   R functions written and grouped around a theme\n\n::: instrumental\n-   Optional:\n    -   Sample datasets\n    -   Vignettes (usage tutorials)\n-   Documentation you can access with `?function_name`\n:::\n\n## Install/Load R Packages\n\n-   R's ecosystem is community-driven\n\n::: incremental\n-   Most packages are user-written and publicly shared\n-   Use `install.packages()` to install, `library()` to load\n-   View and manage packages in RStudio’s **Packages** tab\n-   Can also access functions using `package_name::function()` syntax\\\n:::\n\n# Arithmetic Operators\n\n## Arithmetic Operators\n\n-   R can perform all standard mathematical operations\n\n| Operator    | Description                 |\n|-------------|-----------------------------|\n| `+`         | Addition                    |\n| `-`         | Subtraction                 |\n| `*`         | Multiplication              |\n| `/`         | Division                    |\n| `^` or `**` | Exponentiation              |\n| `%%`        | Modulo (remainder)          |\n| `%/%`       | Integer division (quotient) |\n\n## Arithmetic Examples\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 2 # Addition\n5 - 3 # Subtraction\n4 * 2 # Multiplication\n10 / 2 # Division\n3^2   # Exponentiation\n3**2  # Exponentiation\n10 %% 3  # Modulo (remainder)\n10 %/% 3 # Integer division (quotient)\n```\n:::\n\n\n\n## Order of Operations\n\n-   R follows BEDMAS (Brackets, Exponents, Division, Multiplication,\n    Addition, Subtraction) for evaluating mathematical expressions\n\n::: fragment\n-   E.g.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- 3 + 4 * 2^2 / (1 + 1)\n# Evaluates as:\n# 3 + 4 * 4 / 2\n# 3 + 16 / 2\n# 3 + 8\n# [1] 11\n```\n:::\n\n\n:::\n\n# Logical Operators\n\n## Logical Operators\n\n-   Logical operators are used to compare values, filter data, and\n    control the flow of code based on logical conditions\n\n::: incremental\n-   They are essential for tasks like:\n    -   Subsetting data\n    -   Evaluating conditions in if, while, and for statements\n    -   Creating new variables based on rules\n    -   Combining multiple conditions\n-   You can read more about logical operators\n    [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Logic.html)\n    and\n    [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/logical.html)\n:::\n\n## Logical Operators (cont.)\n\n| Operator | Meaning                  | Example  | Result |\n|----------|--------------------------|----------|--------|\n| `==`     | Equal to                 | `5 == 5` | `TRUE` |\n| `!=`     | Not equal to             | `5 != 3` | `TRUE` |\n| `<`      | Less than                | `3 < 5`  | `TRUE` |\n| `<=`     | Less than or equal to    | `5 <= 5` | `TRUE` |\n| `>`      | Greater than             | `7 > 4`  | `TRUE` |\n| `>=`     | Greater than or equal to | `4 >= 4` | `TRUE` |\n\n## Boolean Operators\n\n-   **Boolean operators** are logical operators that work with Boolean\n    values, i.e., values that are either `TRUE` or `FALSE`\n\n::: incremental\n-   They allow you to combine, invert, or compare logical conditions in\n    programming\n-   In R, Boolean operators are essential for:\n    -   Filtering data\n    -   Creating conditional logic\n    -   Controlling program flow (e.g., in `if` statements)\n:::\n\n## Boolean Operators (cont.)\n\n+-------------+-----------------+-------------------------------------+\n| Operator    | Name            | Description                         |\n+=============+=================+=====================================+\n| `!`         | NOT             | Reverses a logical value (`TRUE` ⇄  |\n|             |                 | `FALSE`)                            |\n+-------------+-----------------+-------------------------------------+\n| `&`         | AND             | `TRUE` only if **both** conditions  |\n|             | (vectorized)    | are `TRUE`                          |\n+-------------+-----------------+-------------------------------------+\n| `|`         | OR (vectorized) | `TRUE` if **either** condition is   |\n|             |                 | `TRUE`                              |\n+-------------+-----------------+-------------------------------------+\n| `&&`        | AND (first      | Evaluates only the **first          |\n|             | element only)   | element**                           |\n+-------------+-----------------+-------------------------------------+\n| \\`          | OR (first       | Evaluates only the **first          |\n|             | element only)   | element**                           |\n+-------------+-----------------+-------------------------------------+\n\n## Boolean Operators (cont.)\n\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 2\n1 > 2 & 1 > 0.5 \n1 > 2 | 1 > 0.5 \nisTRUE (1 < 2)\n```\n:::\n\n\n\n## Negation: `!`\n\n-   We use `!` as a short hand for negation\n\n``` r\nis.na(1:10)\n!is.na(1:10)\n```\n\n> -   This will come in very handy when we start altering data objects\n>     based on non-missing (i.e. non-NA) observations\n\n## Value Matching: `%in%`\n\n-   To see whether an object is contained within (i.e. matches one of) a\n    list of items, use `%in%`\n\n``` r\n4 %in% 1:10\n4 %in% 5:10\n```\n\n## Order of Precedence\n\n-   Logical operators (`>`,`==`, etc) are evaluated before Boolean\n    operators (& and \\|)\n\n> -   Be explicit about each component of your logic statement(s)\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 0.5 & 2 # Returns illogical result\n1 > 0.5 & 1 > 2 # Returns correct result\n```\n:::\n\n\n:::\n\n# Assignment\n\n## Assignment\n\n-   **Assignment** refers to the creation of a new object, e.g.,\n    variable, vector, matrix, data frame, or function\n\n> -   In R, we can use either `<-` or `=` to handle assignment\n\n> -   `<-` is normally read aloud as \"gets\"\n\n::: fragment\n``` r\na <- 10 + 5\na\n```\n:::\n\n## Assignment (cont.)\n\n-   Note that when a variable is created, it appears in the environment\n    tab in RStudio\n\n> -   Of course, an arrow can point in the other direction, too (i.e.,\n>     `->`), though it is less common\n\n::: fragment\n``` r\n10 + 5 -> a \na\n```\n:::\n\n## Assignment (cont.)\n\n-   You can also use `=` for assignment\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb = 10 + 10. # ## Note that the assigned object *must* be on the left with ==\nb\n```\n:::\n\n\n\n> -   Most R users seem top prefer `<-` for assignment, since `=` also\n>     has specific role for evaluation *within* functions\n\n> -   Use whichever you prefer, just be consistent\n\n## Variable Names\n\n-   A variable name must start with a letter and can be a combination of\n    letters, digits, period(.) and underscore(\\_)\n\n> -   A variable name cannot start with a number or underscore\n\n> -   Reserved words cannot be used as variables (see\n>     [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html)\n>     for a full list)\n\n> -   Best not to use semi-reserved words either (words that can be\n>     over-written, but best not to, e.g., `pi=2`)\n\n# Vectors\n\n## Creating a Vector\n\n-   Vectors are the most basic data structure in R, and they are\n    essential for data manipulation, mathematical operations, and\n    regression analysis\n\n> -   Vectors are created using `c()`\n\n::: fragment\n``` r\n?c\n# Combine values into a vector\nx <- c(1,2,3)\n```\n:::\n\n## Creating a Vector (cont.)\n\n-   Types of vectors:\n\n    > -   Numeric: `c(1.5, 2.8)`\n    > -   Integer: `c(1L, 2L)` (the `L` denotes integers)\n    > -   Character: `c(\"apple\", \"banana\")`\n    > -   Logical: `c(TRUE, FALSE, TRUE)`\n\n> -   All elements of a vector must be the same type\n\n## Sequential Values\n\n-   To generate a variable as a sequence between two numbers, use `:`\n    between the numbers or use `seq()`\n\n``` r\n?seq\nx <- 1:5               # 1 2 3 4 5\nx <- seq(1, 10, by = 2)  # 1 3 5 7 9\n```\n\n## Repeated Values\n\n-   For repeating values, we can use `rep()`\n\n``` r\n?rep\nrep(3, times = 4)       # 3 3 3 3\nrep(c(1, 2), times = 3) # 1 2 1 2 1 2\n```\n\n## Vector Operations\n\n-   Arithmetic operations are performed element-wise\n\n``` r\nx <- c(1,2,3)\nx + 1        \n#[1] 2 3 4\n\nx * 2         \n#[1] 2 4 6\n\nx^2          \n#[1] 1 4 9\n```\n\n## Vector Operations (cont.)\n\n-   Operations with another vector (must be the same length)\n\n::: fragment\n``` r\ny <- c(10, 20, 30)\nx + y        # 11 22 33\n```\n:::\n\n## Useful Vector Functions\n\n+-------------------------------+-----------------------------------+\n| Function(s)                   | Description                       |\n+===============================+===================================+\n| `length(x)`                   | Number of elements                |\n+-------------------------------+-----------------------------------+\n| `sum(x)`                      | Total sum                         |\n+-------------------------------+-----------------------------------+\n| `mean(x)`, `median(x)`        | Average, middle value             |\n+-------------------------------+-----------------------------------+\n| `var(x)`, `sd(x)`             | Variance and standard deviation   |\n+-------------------------------+-----------------------------------+\n| `min(x)`, `max(x)`            | Extremes                          |\n+-------------------------------+-----------------------------------+\n| `sort(x)`, `rank(x)`          | Sorting and ranking               |\n+-------------------------------+-----------------------------------+\n| `which(x > 15)`               | Indices where condition is true   |\n+-------------------------------+-----------------------------------+\n| `any(x > 10)`, `all(x > 10)`  | Logical checks                    |\n+-------------------------------+-----------------------------------+\n\n# Data Frames\n\n## Data Frames\n\n-   A data frame is one of the most commonly used data structures in R\n    for storing and analyzing tabular data (like spreadsheets or\n    datasets)\n\n> -   Two dimensional (rows and columns)\n\n> -   Columns = variables, rows = observations\n\n> -   Each column is a vector (can be numeric, character, logic, etc.)\n\n> -   Each column can have a different data type, unlike matrices\n\n## Creating a Data Frame\n\n-   Data frames are created using the `data.frame()` command\n\n``` r\ndf <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Carol\"),\n  age = c(25, 30, 28),\n  income = c(45000, 52000, 50000)\n)\n```\n\n## Accessing Data\n\n-   To refer to a variable within a data fame by column name, use the\n    `df$varname` syntax, e.g.,\n\n``` r\ndf$age\n```\n\n## Add Variables to Data Frame\n\n-   To add a variable use the `df$varname` syntax and assign the\n    variable values, e.g.,\n\n``` r\ndf$education <- c(\"High School\", \"Undergrad\", \"Graduate\") \n```\n\n## Useful Functions\n\n| Function               | Description                 |\n|------------------------|-----------------------------|\n| `str(df)`              | Structure of the data frame |\n| `summary(df)`          | Summary statistics          |\n| `head(df)`             | First 6 rows                |\n| `nrow(df)`             | Number of rows              |\n| `ncol(df)`             | Number of columns           |\n| `names(df)`            | Column names                |\n| `df$varname`           | Access a column             |\n| `subset(df, age > 25)` | Filter rows                 |\n\n# Matrices and Arrays\n\n## Matrices\n\n-   Matrices are two-dimensional data structures that are essential for\n    representing equations, systems of linear equations, and matrix\n    algebra\n\n> -   To create a matrix in R, use the `matrix()` function\n\n::: fragment\n``` r\n?matrix\nA <- matrix(1:6, nrow = 2, ncol = 3)\n#      [,1] [,2] [,3]\n# [1,]    1    3    5\n# [2,]    2    4    6\n```\n:::\n\n## Matrix Operations\n\n-   Element-wise operations\n\n``` r\nA+1\nA*2\n```\n\n> -   Matrix multiplication is denoted by `%*%`\n\n::: fragment\n``` r\nB <- matrix(7:12, nrow=3, ncol=2)\n\nA%*%B\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n```\n:::\n\n## Matrix Operations (cont.)\n\n-   Transpose `t()`\n\n``` r\nt(A)\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n\n> -   Inverse (for square matrices), use `solve()`\n\n::: fragment\n``` r\n?solve\nM <- matrix(c(2, 1, 1, 2), nrow = 2)\nsolve(M)\n```\n:::\n\n## Matrix Operations (cont.)\n\n-   Determinant `det()`\n\n``` r\n?det\ndet(M)\n```\n\n> -   Diagonal matrix `diag()`\n\n::: fragment\n``` r\n?diag\ndiag(1,3) # 3x3 identity matrix\n```\n:::\n\n## Converting Data Frames to Matrices\n\n-   Use `as.matrix()` when you need to perform numerical matrix\n    operations or use functions that require matrix inputs\n\n> -   Important note: Data frames can hold different variable types,\n>     matrices cannot\n\n> -   Check the structure of a data frame using `str()`\n\n# Reading and Writing Data\n\n## Reading and Writing Data\n\n-   R is capable of reading data from numerous file types and writing\n    data to numerous file types\n\n## Reading R Data\n\n-   R data is stored as `.RData` or `.rda` files\n\n> -   Use `load()` to open a file that contains saved R objects (e.g.,\n>     data frames, vectors, models)\n\n::: fragment\n``` r\n?load\nload(\"my_data.RData\")  # Loads all objects saved in the file\n```\n:::\n\n> -   After loading, the objects appear in your environment\n\n## Opening a `.csv` File\n\n-   Use `read.csv()` (comma-separated) or `read.table()` (more general)\n\n::: fragment\n``` r\n?read.csv\ndf <- read.csv(\"data.csv\", header = TRUE)\n```\n:::\n\n## Opening Excel, Stata, SPSS, or SAS Files\n\n-   These require external packages\n\n> -   Excel (`.xlsx`, `.xls`) requires: `readxl` (does not need Excel\n>     installed)\n\n::: fragment\n``` r\ninstall.packages(\"readxl\")\nlibrary(readxl)\n?read_excel\n\ndf <- read_excel(\"data.xlsx\", sheet = 1)\n```\n:::\n\n## Opening Excel, Stata, SPSS, or SAS Files (cont.)\n\n-   Importing Stata (`.dta`), SPSS (`.sav`), and SAS (`.sas7bdat`) data\n    into R requires the `haven` package\n\n``` r\ninstall.packages(\"haven\")\nlibrary(haven)\n\ndf <- read_dta(\"data.dta\")\n# df <- read_sav(\"data.sav\")\n# df <- read_sas(\"data.sas7bdat\")\n```\n\n## Saving a Data Frame as `.RData`\n\n-   Use `save()` to save one or more R objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(df, \n     file = \"my_data.RData\")\n\n# Save multiple objects\nsave(df1, \n     df2, \n     model, \n     file = \"project_data.RData\") \n```\n:::\n\n\n\n## Saving a Data Frame as `.csv`\n\n-   Use `write.csv()`\n\n``` r\nwrite.csv(df, file = \"data.csv\", row.names = FALSE)\n```\n\n## Saving a Data Frame as Excel (`.xlsx`)\n\n-   Requires `writexl` or `openxlsx`\n\n``` r\ninstall.packages(\"writexl\")\nlibrary(writexl)\n\nwrite_xlsx(df, \"data.xlsx\")\n```\n\n## Saving a Data Frame as Stata, SPSS, or SAS\n\n-   Requires `haven`\n\n``` r\nwrite_dta(df, \"data.dta\")\nwrite_sav(df, \"data.sav\")\nwrite_sas(df, \"data.sas7bdat\")  # only works with certain formats\n```\n\n## Summary Table\n\n+---------------+---------------+-----------------+---------------+\n| Format        | Read Function | Write Function  | Package       |\n|               |               |                 | Required      |\n+===============+===============+=================+===============+\n| `.RData`      | `load (\"      | `sa ve (d       | Base R        |\n|               | file.RData\")` | f, file = ...)` |               |\n+---------------+---------------+-----------------+---------------+\n| `.csv`        | `read.c sv    | `write.c sv (d  | Base R        |\n|               | (\"file.csv\")` | f, file = ...)` |               |\n+---------------+---------------+-----------------+---------------+\n| Excel         | `             | `write_xlsx()`  | `readxl`,     |\n|               | read_excel()` |                 | `writexl`     |\n+---------------+---------------+-----------------+---------------+\n| Stata         | `read_dta()`  | `write_dta()`   | `haven`       |\n+---------------+---------------+-----------------+---------------+\n| SPSS          | `read_sav()`  | `write_sav()`   | `haven`       |\n+---------------+---------------+-----------------+---------------+\n| SAS           | `read_sas()`  | `write_sas()`   | `haven`       |\n+---------------+---------------+-----------------+---------------+\n\n# Indexing\n\n## Indexing\n\n-   **Indexing**: the process of accessing, extracting, or modifying\n    elements within data structures like vectors, matrices, lists, and\n    data frames\n\n> -   Allows for selecting variables or observations (e.g., filter rows\n>     by condition)\n\n> -   Enables subsetting data before running models\n\n## Indexing Syntax\n\n-   Basic syntax is `object[rows,columns]`\n\n> -   For 1D objects (e.g., vectors): `x[i]` gives the i^th^ object in\n>     the vector\n> -   For 2D objects (e.g., matrices and data frames): `df[row, col]`\n> -   Indexing is 1-based in R (first element is `x[1]`)\n\n## Indexing Vectors\n\n``` r\nx <- c(10, 20, 30, 40)\n\nx[1]        # First element (10)\nx[2:3]      # Elements 2 to 3 (20, 30)\nx[-1]       # All but the first element (20, 30, 40)\nx[c(1, 4)]  # Elements 1 and 4 (10, 40)\n\n# Logical indexing\nx[x > 25]   # Returns values greater than 25 (30, 40)\n```\n\n## Indexing Matrices\n\n-   The Syntax `df[i,j]` will select the element in the i^th^ row of the\n    j^th^ column\n\n> -   To isolate the i^th^ row, simply use `df[i,]`\n\n> -   To isolate the j^th^ column, use `df[,j]`\n\n## Indexing Matrices (cont.)\n\n-   E.g.,\n\n``` r\nm <- matrix(1:9, \n            nrow = 3)\n\nm[1, 2]     # Element in row 1, column 2\nm[ , 2]     # Entire 2nd column\nm[2, ]      # Entire 2nd row\n```\n\n## Indexing Data Frames\n\n``` r\ndf <- data.frame(name = c(\"Alice\", \"Bob\"), age = c(25, 30))\n\ndf[1, 2]       # Row 1, column 2 (25)\ndf$age         # Column \"age\"\ndf[[\"age\"]]    # Also accesses column \"age\"\ndf[ , \"name\"]  # Column by name\n```\n\n# Basic Graphics\n\n## Base Plotting\n\n-   The `plot()` function is a versatile command in base R for creating\n    simple visualizations, most commonly:\n\n    > -   Scatterplots\n    > -   Line plots\n    > -   Plots of single vectors (e.g., time series, categorical data)\n\n## Scatterplot of Two Numeric Vectors\n\n``` r\n?plot\n\nx <- c(1, 2, 3, 4, 5)\ny <- c(2, 4, 3, 7, 6)\n\nplot(x = x, \n     y = y)\n```\n\n## Customize Labels and Appearance\n\n+--------------+------------------------------------------------------+\n| Argument     | Description                                          |\n+==============+======================================================+\n| `main`       | Title of the plot                                    |\n+--------------+------------------------------------------------------+\n| `xlab`       | Label for $x$-axis                                   |\n+--------------+------------------------------------------------------+\n| `ylab`       | Label for $y$-axis                                   |\n+--------------+------------------------------------------------------+\n| `xlim`       | Set $x$-axis range                                   |\n+--------------+------------------------------------------------------+\n| `ylim`       | Set $y$-axis range                                   |\n+--------------+------------------------------------------------------+\n| `col`        | Color of points or lines                             |\n+--------------+------------------------------------------------------+\n| `pch`        | Plotting character (symbol shape)                    |\n+--------------+------------------------------------------------------+\n| `type`       | `\"p\"` for points (default), `\"l\"` for lines, `\"b\"`   |\n|              | for both                                             |\n+--------------+------------------------------------------------------+\n\n## Customize Labels and Appearance\n\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x    = x, \n     y    = y,\n     main = \"My Scatterplot\",\n     xlab = \"X Values\",\n     ylab = \"Y Values\",\n     col  = \"blue\",\n     pch  = 16)  # Point type\n```\n:::\n\n\n\n## Common Plot Types in Base R\n\n+----------------+----------------+----------------------------------+\n| Plot Type      | Command        | Description                      |\n|                | Example        |                                  |\n+================+================+==================================+\n| **Histogram**  | `hist(x)`      | Distribution of a numeric        |\n|                |                | variable                         |\n+----------------+----------------+----------------------------------+\n| **Boxplot**    | `boxplot(x)`   | Summary of distribution (median, |\n|                |                | IQR)                             |\n+----------------+----------------+----------------------------------+\n| **Barplot**    | `bar p         | Frequencies of categorical       |\n|                | lot(table(x))` | values                           |\n+----------------+----------------+----------------------------------+\n| **Time         | `plot .        | Line plot optimized for time     |\n| Series**       | ts(ts_object)` | series                           |\n+----------------+----------------+----------------------------------+\n| **QQ Plot**    | `qqnorm (      | Compares data to a normal        |\n|                | x); qqline(x)` | distribution                     |\n+----------------+----------------+----------------------------------+\n| **Pairs Plot** | `pai r         | Matrix of scatterplots for       |\n|                | s(data_frame)` | multiple variables               |\n+----------------+----------------+----------------------------------+\n| **Density      | `pl o          | Smoothed version of a histogram  |\n| Plot**         | t(density(x))` |                                  |\n+----------------+----------------+----------------------------------+\n\n# Conditional Statements and Loops\n\n## Control Flow Constructs\n\n-   Control flow constructs are programming tools that allow your R code\n    to:\n\n    > -   Make decisions\n    > -   Repeat tasks\n    > -   Branch based on conditions\n    > -   Control the order in which code executes\n\n## Conditional Statements `if`/`else` Statements\n\n-   Conditional statements allow R to make decisions and execute code\n    selectively based on whether conditions are TRUE or FALSE\n\n> -   Most common branching tools in R are `if`/`else` statements\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  # code to run if condition is TRUE\n} else {\n  # code to run if condition is FALSE\n}\n```\n:::\n\n\n:::\n\n## Conditional Statements `if`/`else` Statements (cont.)\n\n-   Use if / else when you want your program to:\n\n    > -   Do one thing if a condition is met\n    > -   Do something else if it is not\n\n::: fragment\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- -5\n\nif (x > 0) {\n  print(\"Positive number\")\n} else {\n  print(\"Zero or negative\")\n}\n\n# [1] \"Zero or negative\"\n```\n:::\n\n\n:::\n\n## Conditional Statements `ifelse`\n\n-   For element-wise vectorized branching, use `ifelse()`\n\n> -   It lets you apply element-wise logic to vectors, returning one\n>     value if a condition is TRUE, and another if it’s FALSE\n\n::: incremental\n-   Syntax: `ifelse(test, yes, no)`\n    -   `test`: A logical statement\n    -   `yes`: Value of return if `test` is `TRUE`\n    -   `no`: Value if `test` is `FALSE`\n:::\n\n## Conditional Statements `ifelse` (cont.)\n\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-2, 0, 3)\nifelse(x > 0, \"Positive\", \"Not Positive\")\n# [1] \"Not Positive\" \"Not Positive\" \"Positive\"\n```\n:::\n\n\n\n## Loops\n\n-   A `for` loop in R is used to repeat a block of code for each value\n    in a sequence\n\n> -   It’s a fundamental tool for automating repetitive tasks,\n>     especially in simulations, computations, or row-wise operations\n\n::: fragment\n-   Syntax:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (variable in sequence) {\n  # code to run for each value\n}\n```\n:::\n\n\n:::\n\n## Loops (cont.)\n\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  print(i^2)\n}\n\n#> [1] 1\n#> [1] 4\n#> [1] 9\n#> [1] 16\n#> [1] 25\n```\n:::\n\n\n\n# Functions\n\n## Functions\n\n-   A function in R is a block of code designed to perform a specific\n    task\n\n> -   Functions allow you to reuse code, simplify your scripts, and make\n>     your analysis more modular and readable\n\n> -   Keep functions short and focused, should perform one task\n\n## Writing Functions\n\n-   Use the `function()` command\n\n::: fragment\n-   Syntax\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function <- function(arg1, arg2 = default_value) {\n  # Code to execute\n  result <- some_operation\n  return(result)\n}\n```\n:::\n\n\n:::\n\n## Fuctions Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquare <- function(x) {\n  result <- x^2\n  return(result)\n}\n\nsquare(4)   \n\n#[1] 16\n```\n:::\n\n\n\n# Global Environment\n\n## Global Environment\n\n-   The **global environment** is the main workspace in R where all your\n    user-defined objects are stored during a session\n\n    > -   Variables\n    > -   Data frames\n    > -   Functions\n    > -   Models\n\n> -   In RStudio, we observe the global environment in the\n>     **Environment** tab\n\n## Global Environment (cont.)\n\n-   **Important**: Variables stored inside a data frame (e.g., `d$x`)\n    are not the same as variables in the global environment (e.g., `x`)\n\n> -   Even if a data frame is in the global environment, its columns are\n>     accessible only through the data frame itself, not as independent\n>     variables, unless they are also explicitly assigned to the global\n>     environment\n\n::: fragment\n-   E.g.,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:5,\n                 y = 6:10)\n\nmean(x)\n```\n:::\n\n\n:::\n\n## Accessing Variables in a Data Frame\n\n-   We have to specify that `x` belongs to `df`\n\n> -   As above we can dollar sign operator `$`, i.e., `df$x`\n\n> -   Alternatively, we can use `with()`, e.g., `with(df, mean(x))`\n\n> -   If we are using a single data frame we can attach the dataset\n>     using `attach()`\n\n## Removing Objects from the Global Environment\n\n-   If we want to remove an object from the environment, we can use the\n    `rm()` command\n\n> -   To delete all objects, use `rm(list=ls())`\n\n# Good Coding Practices\n\n## Good Coding Practices\n\n-   Following consistent coding practices makes your code easier to\n    read, debug, and share\n\n## Variable Names\n\n-   Use clear, descriptive variable names\n\n> -   Use **lowercase** letters with **underscores**\n\n::: fragment\n``` r\nincome_total <- 50000\nmean_income <- mean(income_vector)\n```\n:::\n\n> -   Avoid short, vague names like `x1`, `tmp`, or `df1`\n> -   Use names that reflect the content or purpose of the variable\n\n## Variable Names (cont.)\n\n-   Avoid hardcoding values in multiple places\n\n> -   Assign values to a variable and reuse\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntax_rate <- 0.3\nafter_tax_income <- income * (1 - tax_rate)\n```\n:::\n\n\n:::\n\n## Command Line\n\n-   Keep code clean and readable by avoiding long, crowded lines\n\n``` r\nresult <- a + b + c\n```\n\n> -   Spaces before and after operators `+`, `-`, `*`, `/`, `==`, `<`,\n>     `>=`, etc\n> -   Improves visual structure and reduces errors during review or\n>     collaboration\n\n## Command Line (cont.)\n\n+----------------------------+--------------------------------------+\n| Good Practice              | Poor Practice                        |\n+============================+======================================+\n| ``` r                      | ``` r                                |\n| # Define variables         | m                                    |\n| y <- c(5, 7, 9, 11)        | s                                    |\n| x <- c(1, 2, 3, 4)         | e <- mean((y - fitted(lm(y ~ x)))^2) |\n|                            | ```                                  |\n| # Fit linear model         |                                      |\n| model <- lm(y ~ x)         |                                      |\n|                            |                                      |\n| # Extract fitted values    |                                      |\n| y_hat <- fitted(model)     |                                      |\n|                            |                                      |\n| # Calculate residuals      |                                      |\n| residuals <- y - y_hat     |                                      |\n|                            |                                      |\n| #                          |                                      |\n|                            |                                      |\n| Compute Mean Squared Error |                                      |\n| mse <- mean(residuals^2)   |                                      |\n| ```                        |                                      |\n+----------------------------+--------------------------------------+\n\n## One Line per Argument\n\n-   Use one line per argument in long functions\n\n> -   For readability, especially with functions like `plot()` or `lm()`\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, y,\n     main = \"Scatterplot\",\n     xlab = \"X values\",\n     ylab = \"Y values\",\n     col  = \"blue\",\n     pch  = 16)\n```\n:::\n\n\n:::\n\n## Use Comments\n\n-   Use `#` to describe what your code is doing\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average income\nmean_income <- mean(income_vector, \n                    na.rm = TRUE)\n```\n:::\n\n\n:::\n\n> -   Keep comments concise and helpful\n\n## Use Comments (cont.)\n\n-   To write multiple lines of comments, use `#>`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> To write another line of code simply press enter (or return).\n#> Useful at the start of code file to explain the purpose of\n#> the R script.\n```\n:::\n\n\n\n## Use Comments\n\n-   Use sectioning comments to break up files into manageable pieces\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data --------------------------------------\n\n# Plot data --------------------------------------\n```\n:::\n\n\n\n> -   RStudio provides a keyboard shortcut to create these headers\n>     `Cmd/Ctrl+Shift+R`\n\n> -   Makes it easy to navigate through code\n\n# Help\n\n## Help\n\n-   For more information on a (named) function or object in R, consult\n    the “help” documentation\n\n> -   Or, more simply, just use `?`\n\n::: fragment\n``` r\nhelp(plot)\n?plot\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}